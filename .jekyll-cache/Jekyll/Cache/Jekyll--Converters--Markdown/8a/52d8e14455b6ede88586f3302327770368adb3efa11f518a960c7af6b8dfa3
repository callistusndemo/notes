I""+<h1 id="things-i-learned-from-fastcoreutils">Things I Learned From fastcore.utils</h1>

<p>Some notes I took while documenting <a href="http://fastcore.fast.ai/utils.html">this module</a>.</p>

<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#things-i-learned-from-fastcoreutils" id="markdown-toc-things-i-learned-from-fastcoreutils">Things I Learned From fastcore.utils</a></li>
  <li><a href="#important-reading-materials" id="markdown-toc-important-reading-materials">Important Reading Materials</a>    <ol>
      <li><a href="#defining-classes-with-type" id="markdown-toc-defining-classes-with-type">Defining classes with type</a></li>
      <li><a href="#avoid-boilerplate-when-defining-new-classes-w-store_attr" id="markdown-toc-avoid-boilerplate-when-defining-new-classes-w-store_attr">Avoid boilerplate when defining new classes w/ <code class="highlighter-rouge">store_attr</code></a></li>
      <li><a href="#utilities-im-likely-to-use-in-other-projects" id="markdown-toc-utilities-im-likely-to-use-in-other-projects">Utilities I’m likely to use in other projects</a>        <ol>
          <li><a href="#multiprocessing" id="markdown-toc-multiprocessing">Multiprocessing</a></li>
          <li><a href="#functions-on-functions" id="markdown-toc-functions-on-functions">Functions on Functions</a></li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#other" id="markdown-toc-other">Other</a>    <ol>
      <li><a href="#class-decorators" id="markdown-toc-class-decorators">Class Decorators</a></li>
    </ol>
  </li>
</ol>

</details>

<h1 id="important-reading-materials">Important Reading Materials</h1>

<ul>
  <li>Real Python <a href="https://realpython.com/python-metaclasses/">Metaclasses blog post</a></li>
  <li>fastcore.utils docs: <a href="http://fastcore.fast.ai/utils.html">http://fastcore.fast.ai/utils.html</a></li>
</ul>

<h2 id="defining-classes-with-type">Defining classes with type</h2>

<p>You can use <code class="highlighter-rouge">type</code> to also define classes.  This can be useful when you want to programmatically define classes, and is new to python 3.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="n">Foo</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span>
    <span class="s">'Foo'</span><span class="p">,</span>
    <span class="p">(),</span>
    <span class="p">{</span>
        <span class="s">'attr'</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
        <span class="s">'attr_val'</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">attr</span>
    <span class="p">}</span>
<span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">attr</span>
<span class="mi">100</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">attr_val</span><span class="p">()</span>
<span class="mi">100</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>This is used in <code class="highlighter-rouge">fastcore.utils.get_class</code> <a href="http://fastcore.fast.ai/utils.html#get_class">http://fastcore.fast.ai/utils.html#get_class</a>.</p>

<h2 id="avoid-boilerplate-when-defining-new-classes-w-store_attr">Avoid boilerplate when defining new classes w/ <code class="highlighter-rouge">store_attr</code></h2>
<p>Use <code class="highlighter-rouge">fast core.utils.store_attr</code>: <a href="http://fastcore.fast.ai/utils.html#get_class">http://fastcore.fast.ai/utils.html#get_class</a></p>

<p>The old way</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">T</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span> 
		<span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span>
      <span class="bp">self</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">c</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The new way</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">T</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">):</span> <span class="n">store_attr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">'a,b,c'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="utilities-im-likely-to-use-in-other-projects">Utilities I’m likely to use in other projects</h2>

<p>Suggest going through <a href="http://fastcore.fast.ai/utils.html">http://fastcore.fast.ai/utils.html</a> and taking a look.  The below utilities are well documented, but this is a quick list of things I especially liked.  You can accomplish the same things without these utilities, but these utilities involve writing less code.</p>

<ul>
  <li><code class="highlighter-rouge">mk_class</code>: quickly add a bunch of attributes to a class</li>
  <li><code class="highlighter-rouge">wrap_class</code>: add new methods to an a class with a simple decorator</li>
  <li><code class="highlighter-rouge">store_attr</code>:  already discussed above.</li>
  <li><code class="highlighter-rouge">groupby</code>: similar to scala groupby</li>
  <li><code class="highlighter-rouge">merge</code>: merge dicts</li>
  <li><code class="highlighter-rouge">fasttuple</code>: a tuple on steroids</li>
  <li><code class="highlighter-rouge">Infinite Lists</code>: useful for padding and testing</li>
  <li><code class="highlighter-rouge">chunked</code>: for batching and organizing stuff</li>
  <li><code class="highlighter-rouge">Pathlib.Path Extensions</code>:  A better Pathlib.Path.  <a href="http://fastcore.fast.ai/utils.html#Extensions-to-Pathlib.Path">http://fastcore.fast.ai/utils.html#Extensions-to-Pathlib.Path</a></li>
</ul>

<h3 id="multiprocessing">Multiprocessing</h3>

<p>Extends python’s multiprocessing <a href="http://fastcore.fast.ai/utils.html#Multiprocessing">http://fastcore.fast.ai/utils.html#Multiprocessing</a>.  Has features like:</p>

<ul>
  <li>progress bars</li>
  <li>better default behavior</li>
  <li>ability to pause to mitigate race conditions with external services: <a href="http://fastcore.fast.ai/utils.html#parallel">http://fastcore.fast.ai/utils.html#parallel</a></li>
  <li><code class="highlighter-rouge">parallel_chunks</code>: processing things in batches on each worker, ex: if you have a vectorized operation to perform in chunks</li>
</ul>

<h3 id="functions-on-functions">Functions on Functions</h3>

<p>This is a functional programming toolkit that is my favorite part of this library.</p>

<p><a href="http://fastcore.fast.ai/utils.html#Functions-on-Functions">http://fastcore.fast.ai/utils.html#Functions-on-Functions</a></p>

<ul>
  <li><code class="highlighter-rouge">compose</code>:  functional programming - compose several functions</li>
  <li><code class="highlighter-rouge">maps</code>:  a map that also composes functions</li>
  <li><code class="highlighter-rouge">partialler</code>: partial that copies the docstring</li>
  <li><code class="highlighter-rouge">mapped</code>: A more robust <code class="highlighter-rouge">map</code></li>
  <li><code class="highlighter-rouge">using_attr</code>:  change the way a function uses its inputs (see docs)</li>
  <li><code class="highlighter-rouge">Self</code>:  with an uppercase <code class="highlighter-rouge">S</code> - a better lambda</li>
</ul>

<h1 id="other">Other</h1>

<h2 id="class-decorators">Class Decorators</h2>
<p>I did not know you could have decorators on classes.  I though it was only for functions.  Learned this from  Real Python <a href="https://realpython.com/python-metaclasses/">Metaclasses blog post</a>.</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">NewClass</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="n">attr</span> <span class="o">=</span> <span class="mi">100</span>
    <span class="k">return</span> <span class="n">NewClass</span>

<span class="o">@</span><span class="n">decorator</span>
<span class="k">class</span> <span class="nc">X</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="o">@</span><span class="n">decorator</span>
<span class="k">class</span> <span class="nc">Y</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="o">@</span><span class="n">decorator</span>
<span class="k">class</span> <span class="nc">Z</span><span class="p">:</span>
    <span class="k">pass</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">X</span><span class="p">.</span><span class="n">attr</span>
<span class="mi">100</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Y</span><span class="p">.</span><span class="n">attr</span>
<span class="mi">100</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Z</span><span class="p">.</span><span class="n">attr</span>
<span class="mi">100</span>

</pre></td></tr></tbody></table></code></pre></div></div>
:ET