I"Â<p>High level takeaways after completing the <a href="https://www.coursera.org/learn/programming-languages">3-Part Coursera class Programming Languages</a> with Dan Grossman.</p>

<p>Your GitHub repo for this class (private) <a href="https://github.com/hamelsmu/programming-languages-class">is here</a>.</p>

<h2 id="sml-standard-ml-part-a">SML (Standard ML) Part A</h2>

<ul>
  <li>You setup vim to have an IDE for this.  See these <a href="vim.md">notes</a>.</li>
  <li>ML is a statically typed language with magical <strong>type inference</strong> that works really well.  It automatically determines the types and is very intuitive and helpful.</li>
  <li>Learned how to use recursion everywhere instead of loops, particularly with <code class="highlighter-rouge">hd</code>, <code class="highlighter-rouge">tl</code> and <code class="highlighter-rouge">cons</code>.</li>
  <li>Local variable binding with <code class="highlighter-rouge">let</code> is very important (which also allows you to bind local/private functions as well)</li>
  <li><code class="highlighter-rouge">cons</code> allows you to append to the beginning of a list</li>
  <li>There is an option type that is <code class="highlighter-rouge">NONE</code> or <code class="highlighter-rouge">SOME v</code></li>
  <li>This language doesn‚Äôt encourage mutation, which is a feature.  Otherwise, you can use a reference which is like a pointer to mutate a variable.</li>
  <li><strong>pattern matching with a case expression</strong>  <code class="highlighter-rouge">case name (first, last) =&gt;</code>
    <ul>
      <li>You can have nested patterns</li>
      <li>You can pattern match against function arguments which allow for really nice syntax for achieving multiple dispatch type of functionality..</li>
    </ul>
  </li>
  <li><strong>Tail recursion</strong> with accumulators.  Ex- factorial</li>
  <li>The <code class="highlighter-rouge">fn</code> keyword is used to define <strong>anonymous functions</strong>.</li>
  <li>ML uses <code class="highlighter-rouge">lexical scope</code> which means function is evaluated in the environment where the function was defined. <code class="highlighter-rouge">dynamic scope</code>, which is usually not desired, is the alternative where the function is evaluated in the in the environment it is called.</li>
  <li><strong>Closure</strong> - the call stack has a ‚Äúpair‚Äù that is the (function, environment when the function was defined).  This pair is called the <code class="highlighter-rouge">closure</code>.  The call stack has a snapshot of what the environment looked like at the time the function was defined.</li>
  <li><code class="highlighter-rouge">fold</code> is like reduce.</li>
  <li>ML supports <strong>function composition</strong> like this with  the keyword <code class="highlighter-rouge">o</code>:  <code class="highlighter-rouge">f1 o f2 o f3</code>
    <ul>
      <li>best to do a val binding to avoid unnecessary wrapping: <code class="highlighter-rouge">val newfunc = f1 o f2</code></li>
      <li>with <code class="highlighter-rouge">o</code> you apply functions from right to left so <code class="highlighter-rouge">f1 o f2 x</code> is the same as <code class="highlighter-rouge">f1(f2(x))</code> there is an alternative that is left to right called the <code class="highlighter-rouge">pipeline operator</code>.</li>
    </ul>
  </li>
  <li><strong>Currying and partial application</strong>
    <ul>
      <li>Universal way to make a func curryable:
        <div class="language-ml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kr">fun</span> <span class="nf">myfunc</span> <span class="n">x</span>
      <span class="kr">let</span> <span class="kr">fun</span> <span class="nf">f2</span> <span class="p">(</span><span class="n">z</span><span class="p">)</span> <span class="p">=</span> <span class="n">z</span>
          <span class="kr">fun</span> <span class="nf">f1</span> <span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="p">=</span> <span class="n">f2</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
      <span class="n">begin</span>
          <span class="n">f1</span>
      <span class="kr">end</span>
</code></pre></div>        </div>
      </li>
      <li>ML has first class support for currying so you don‚Äôt have to do the above hack.</li>
    </ul>
  </li>
  <li>ML supports mutual recursion just like <code class="highlighter-rouge">let-rec</code> in racket.</li>
</ul>

<h2 id="racket-part-b">Racket (Part B)</h2>
:ET